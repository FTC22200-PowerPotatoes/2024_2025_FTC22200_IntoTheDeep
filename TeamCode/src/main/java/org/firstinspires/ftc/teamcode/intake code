/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;

/*
 * This OpMode moves our motor for our intake and it also moves our servos
 * The code is structured as a LinearOpMode
 * INCREMENT sets how much to increase/decrease the servo position each cycle
 * CYCLE_MS sets the update period.
 *
 * This code assumes a Servo configured with the name "left_hand" as is found on a Robot.
 *
 * NOTE: When any servo position is set, ALL attached servos are activated, so ensure that any other
 * connected servos are able to move freely before running this test.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this OpMode to the Driver Station OpMode list
 */
@TeleOp(name = "Intake: Motors Servos", group = "Intake")
@Disabled
public class intake extends LinearOpMode {

    /*Declare the Motor and Servos*/

    private DcMotor intakeMotor = null;
    private Servo backIntakeServo = null;
    private Servo frontIntakeServo = null;


    static final double INCREMENT   = 0.01;     // amount to rotate motor
    static final double MAX_POS     =  1.0;     // Maximum rotational position for servo
    static final double MIN_POS     =  0.0;     // Minimum rotational position for servo

    @Override
    public void runOpMode() {

        // Define and Initialize Motors
        intakeMotor = hardwareMap.dcMotor.get("intake_motor");
        double position = MIN_POS; // start at 0

        // Connect to servo (Assume Robot has correct servo names)
        backIntakeServo = hardwareMap.get(Servo.class, "back_intake_servo");
        frontIntakeServo = hardwareMap.get(Servo.class, "front_intake_servo");
        boolean rampUp = true;

        // Wait for the start button
        telemetry.addData(">", "Robot Ready. Press Start.");
        telemetry.update();
        waitForStart();

        // Scan servo till stop pressed.
        while (opModeIsActive()) {
            // increase the motor when we press dpad up, using our increment value
            if (gamepad2.dpad_up) {
                // Keep stepping up until we hit the max value.
                position += INCREMENT;
                if (position >= MAX_POS) {
                    position = MAX_POS;
                }
            } else if (gamepad2.dpad_down) {
                // Keep stepping down until we hit the min value.
                position -= INCREMENT;
                if (position <= MIN_POS) {
                    position = MIN_POS;
                }
            }

            if (rampUp) {
                position += INCREMENT;
                if (position >= MAX_POS) {
                    position = MAX_POS;
                    rampUp = !rampUp;
                }
            } else {
                position -= INCREMENT;
                if (position <= MIN_POS) {
                    position = MIN_POS;
                    rampUp = !rampUp;
                }
            }

            // Set the power of the servos based on gamepad inputs
            if (gamepad2.b) {
                backIntakeServo.setPosition(0.1);
            } else if (gamepad2.a) {
                backIntakeServo.setPosition(-0.1);
            }

            if (gamepad2.x) {
                frontIntakeServo.setPosition(MAX_POS);
            } else if (gamepad2.y) {
                frontIntakeServo.setPosition(MIN_POS);
            }

            // Optionally, update telemetry data to observe servo position changes
            telemetry.addData("Servo Position", position);
            telemetry.update();
        }
    }
}
